{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { ClipboardPlugin, ReadResult, WriteOptions } from './definitions';\n\ndeclare global {\n  interface Clipboard {\n    read(): Promise<any>;\n    write(data: any[]): Promise<any>;\n  }\n}\n\ndeclare let ClipboardItem: any;\n\nexport class ClipboardWeb extends WebPlugin implements ClipboardPlugin {\n  async write(options: WriteOptions): Promise<void> {\n    if (typeof navigator === 'undefined' || !navigator.clipboard) {\n      throw this.unavailable('Clipboard API not available in this browser');\n    }\n\n    if (options.html !== undefined) {\n      await this.writeHTML(options.html, options.text ?? '');\n    } else if (options.text !== undefined) {\n      await this.writeText(options.text);\n    } else if (options.url !== undefined) {\n      await this.writeText(options.url);\n    } else if (options.image !== undefined) {\n      await this.writeImage(options.image);\n    } else {\n      throw new Error('Nothing to write');\n    }\n  }\n\n  async read(): Promise<ReadResult> {\n    if (typeof navigator === 'undefined' || !navigator.clipboard) {\n      throw this.unavailable('Clipboard API not available in this browser');\n    }\n\n    if (typeof ClipboardItem !== 'undefined') {\n      try {\n        const clipboardItems = await navigator.clipboard.read();\n        const blobs: { type: string, blob: string }[] = [];\n        for (const type of clipboardItems[0].types) {\n          const clipboardBlob = await clipboardItems[0].getType(type);\n          const blob = await this._getBlobData(clipboardBlob, type);\n          blobs.push({ type, blob });\n        }\n\n        if (blobs.length === 0) {\n          return this.readText();\n        }\n\n        const htmlBlob = blobs.find(({ type }) => type === 'text/html')?.blob;\n        const textBlob = blobs.find(({ type }) => type === 'text/plain')?.blob;\n\n        if (htmlBlob !== undefined) {\n          return { type: 'text/html', value: htmlBlob, text: textBlob ?? '' };\n        } else if (textBlob !== undefined) {\n          return { type: 'text/plain', value: textBlob, text: textBlob };\n        } else {\n          return { type: blobs[0].type, value: blobs[0].blob, text: '' };\n        }\n      } catch (err) {\n        return this.readText();\n      }\n    } else {\n      return this.readText();\n    }\n  }\n\n  private async readText(): Promise<ReadResult> {\n    if (\n      typeof navigator === 'undefined' ||\n      !navigator.clipboard ||\n      !navigator.clipboard.readText\n    ) {\n      throw this.unavailable(\n        'Reading from clipboard not supported in this browser',\n      );\n    }\n\n    const text = await navigator.clipboard.readText();\n    return { type: 'text/plain', value: text, text };\n  }\n\n  private async writeHTML(html: string, text: string) {\n    if (\n      typeof navigator === 'undefined' ||\n      !navigator.clipboard ||\n      !navigator.clipboard.write\n    ) {\n      throw this.unavailable(\n        'Writting to clipboard not supported in this browser',\n      );\n    } else {\n      try {\n        const htmlType = 'text/html';\n        const textType = 'text/plain';\n        const clipboardItemInput = new ClipboardItem({\n          [htmlType]: new Blob([html], { type: htmlType }),\n          [textType]: new Blob([text], { type: textType }),\n        });\n        await navigator.clipboard.write([clipboardItemInput]);\n      } catch (err) {\n        throw new Error('Failed to write html');\n      }\n    }\n  }\n\n  private async writeImage(image: string) {\n    if (\n      typeof navigator === 'undefined' ||\n      !navigator.clipboard ||\n      !navigator.clipboard.write\n    ) {\n      throw this.unavailable(\n        'Writting to clipboard not supported in this browser',\n      );\n    } else {\n      try {\n        const blob = await (await fetch(image)).blob();\n        const clipboardItemInput = new ClipboardItem({ [blob.type]: blob });\n        await navigator.clipboard.write([clipboardItemInput]);\n      } catch (err) {\n        throw new Error('Failed to write html');\n      }\n    }\n  }\n\n  private async writeText(text: string) {\n    if (\n      typeof navigator === 'undefined' ||\n      !navigator.clipboard ||\n      !navigator.clipboard.writeText\n    ) {\n      throw this.unavailable(\n        'Writting to clipboard not supported in this browser',\n      );\n    }\n\n    await navigator.clipboard.writeText(text);\n  }\n\n  private _getBlobData(clipboardBlob: Blob, type: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      const reader = new FileReader();\n      if (type.includes('image')) {\n        reader.readAsDataURL(clipboardBlob);\n      } else {\n        reader.readAsText(clipboardBlob);\n      }\n      reader.onloadend = () => {\n        const r = reader.result as string;\n        resolve(r);\n      };\n      reader.onerror = e => {\n        reject(e);\n      };\n    });\n  }\n}"]}